user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes 1;

events {worker_connections 1024;}

# Environment variable used for auth
env PERMITTED_ROLE;
env ROLES_CLAIM;
env USERNAME_CLAIM;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log stdout warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Include files with config snippets into the root context.
include /etc/nginx/conf.d/*.conf;

events {
	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 1024;
}

http {
	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;

	# Don't tell nginx version to the clients. Default is 'on'.
	server_tokens off;

	# I don't like typing underscores
	underscores_in_headers off;

	client_max_body_size 1m;

	# Sendfile copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write(). Default is off.
	sendfile on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames. Default is 'off'.
	tcp_nopush on;

    gzip on;
	# Set the Vary HTTP header as defined in the RFC 2616. Default is 'off'.
	gzip_vary on;
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for"';

	access_log stdout main;

	# Imports are cached by putting them here
	init_by_lua_block {
		request "cjson"
		local errlog = require "ngx.errlog"
		errlog.set_filter_level(ngx.INFO)
		require "ffi"
		require "resty.http"
		require "resty.rsa"
		require "resty.string"
		local oid = require("resty.openid")
		oid.init()
	}

    server {
        listen 8080 default_server;
		server_tokens off;

		#Enable this if switching on https
		# add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

		access_by_lua_file access.lua;

        location / {
            root /var/lib/nginx/html;
            add_header Cache-Control "max-age=3600";
        }

		location /callback {
			content_by_lua_block {
				local oid = require("resty.openid")
				oid.callback()
			}
		}

    }

}
